# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        
        if not head or not head.next:
            return 

        #find the middle
        slow, fast = head, head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next

        #reverse the second half (after the middle node)
        prev = None
        curr = slow.next
        slow.next = None
        while curr:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp

        # merge two halves in interleaved pattern

        first, second = head, prev

        while second:
            temp1= first.next
            temp2= second.next

            first.next = second
            second.next = temp1

            first = temp1
            second = temp2

     
